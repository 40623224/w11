<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="yen.20170108171605.1"><vh>@settings</vh>
<v t="yen.20170108171605.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="yen.20170108171605.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="yen.20170108171622.1"><vh>有關 2017fall CADP &amp; CP</vh></v>
<v t="yen.20170108171733.1" a="E"><vh>@path ../</vh>
<v t="leo.20170912150642.1" a="E"><vh>近端無 disqus</vh>
<v t="yen.20170108171733.2"><vh>@button pelican-blog</vh></v>
</v>
<v t="leo.20170912150710.1" a="E"><vh>有 disqus 論壇</vh>
<v t="leo.20170912150710.2"><vh>@button github-blog</vh></v>
</v>
<v t="yen.20170108171733.3"><vh>@edit README.md</vh></v>
<v t="yen.20170108171733.4"><vh>@edit .gitignore</vh></v>
<v t="yen.20170108171733.5" a="E"><vh>Pelican 設定</vh>
<v t="leo.20170912145121.1" a="E"><vh>近端</vh>
<v t="yen.20170108171733.6"><vh>@edit local_publishconf.py</vh></v>
</v>
<v t="leo.20170912145144.1" a="E"><vh>遠端</vh>
<v t="leo.20170912145153.1"><vh>@edit publishconf.py</vh></v>
</v>
<v t="leo.20170912145133.1"><vh>共用</vh></v>
<v t="yen.20170108171733.7"><vh>@edit pelicanconf.py</vh></v>
</v>
<v t="yen.20170224232341.1" a="E"><vh>編輯 template</vh>
<v t="yen.20170224232341.2" a="E"><vh>@path theme/pelican-bootstrap3_local/templates</vh>
<v t="yen.20170224232341.3"><vh>@edit base.html</vh></v>
</v>
<v t="leo.20170912210747.1" a="E"><vh>@path theme/pelican-bootstrap3/templates</vh>
<v t="leo.20170912210747.2"><vh>@edit search.html</vh></v>
<v t="leo.20170912210747.4"><vh>@edit article.html</vh></v>
<v t="leo.20170912210747.3"><vh>@edit base.html</vh></v>
</v>
</v>
<v t="yen.20170108171733.8" a="E"><vh>@clean index.html</vh>
<v t="yen.20170108171733.9" a="E"><vh>html</vh>
<v t="yen.20170108171733.10"><vh>head</vh></v>
<v t="yen.20170108171733.11" a="E"><vh>body</vh>
<v t="yen.20170108171733.12" a="E"><vh>reveal div</vh>
<v t="yen.20170108171733.13" a="E"><vh>slides div</vh>
<v t="yen.20170108171733.14" a="E"><vh>封面投影片</vh>
<v t="yen.20170108171733.15"><vh>封面投影片內容</vh></v>
</v>
<v t="leo.20171109005308.1"><vh>W1</vh>
<v t="leo.20171109005308.2"><vh>a</vh></v>
</v>
<v t="leo.20171109005120.1"><vh>W2</vh>
<v t="leo.20171109005120.2"><vh>b</vh></v>
</v>
<v t="leo.20171109005315.1"><vh>W3</vh>
<v t="leo.20171109005315.2"><vh>c</vh></v>
</v>
<v t="leo.20171109005322.1"><vh>W4</vh>
<v t="leo.20171109005322.2"><vh>d</vh></v>
</v>
<v t="leo.20171109005328.1"><vh>W5~W6</vh>
<v t="leo.20171109005328.2"><vh>6</vh></v>
</v>
<v t="leo.20171109005333.1"><vh>W7~W8</vh>
<v t="leo.20171109005333.2"><vh>e</vh></v>
</v>
<v t="leo.20171109005339.1"><vh>心得</vh>
<v t="leo.20171109005339.2"><vh>心得</vh></v>
</v>
<v t="leo.20171109010939.1" a="E"><vh>筆記</vh>
<v t="leo.20171109010939.2"><vh>筆記</vh></v>
</v>
<v t="leo.20171109005345.1"><vh>自評成績</vh>
<v t="leo.20171109005345.2"><vh>自評成績</vh></v>
</v>
<v t="leo.20170911093601.1"><vh>W1 練習</vh>
<v t="leo.20170911093601.2" a="E"><vh>隨身系統練習</vh>
<v t="leo.20170911093601.3"><vh>Python 3.6 程式環境</vh></v>
</v>
<v t="leo.20170911093601.4"><vh>練習 Fossil SCM</vh>
<v t="leo.20170911093601.5"><vh>了解 Fossil SCM</vh></v>
</v>
<v t="leo.20170913103008.1" a="E"><vh>Fossil SCM 功能說明</vh>
<v t="leo.20170913103008.2"><vh>Fossil SCM 功能</vh></v>
</v>
<v t="leo.20170913103534.1" a="E"><vh>採用 SCM 的目標 1/2</vh>
<v t="leo.20170913103534.2"><vh>SCM 的目標 1/2</vh></v>
</v>
<v t="leo.20170913103707.1" a="E"><vh>採用 SCM 的目標 2/2</vh>
<v t="leo.20170913103707.2"><vh>SCM 的目標 2/2</vh></v>
</v>
<v t="leo.20170913104957.1" a="E"><vh>總結 SCM 的目標</vh>
<v t="leo.20170913104957.2"><vh>SCM 的整體目標</vh></v>
</v>
</v>
<v t="leo.20170911095149.1"><vh>課程評分</vh>
<v t="leo.20170911095149.2" a="E"><vh>課程評分</vh>
<v t="leo.20170911095149.3"><vh>如何評分</vh></v>
</v>
<v t="leo.20170911095149.4" a="E"><vh>課程實習分組</vh>
<v t="leo.20170911095149.5"><vh>如何分組</vh></v>
</v>
</v>
<v t="leo.20170911090052.1"><vh>快捷鍵</vh>
<v t="leo.20170911090052.2"><vh>投影片快捷鍵</vh></v>
</v>
<v t="yen.20170108171733.64" a="E"><vh>各式內容引用範例</vh>
<v t="yen.20170108171733.65" a="E"><vh>導入數學符號與方程式</vh>
<v t="yen.20170108171733.66"><vh>LaTeX 格式方程式</vh></v>
</v>
<v t="yen.20170108171733.67" a="E"><vh>導入縮排程式碼</vh>
<v t="yen.20170108171733.68"><vh>引用程式碼</vh></v>
</v>
<v t="yen.20170108171733.69" a="E"><vh>導入影片</vh>
<v t="yen.20170108171733.70"><vh>iframe 導入影片</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="yen.20170108171733.71" a="E"><vh>@path content</vh>
<v t="yen.20170920223844.1"><vh>@edit 20170920.md</vh></v>
<v t="len.20171030224724.1"><vh>@edit 20170925.md</vh></v>
<v t="leo.20171003222155.1"><vh>@clean 20171003.md</vh>
<v t="leo.20171003222155.2"><vh>ex1 - for 迴圈</vh></v>
<v t="leo.20171003222155.3"><vh>ex2 - input 與單位換算</vh></v>
<v t="leo.20171003222155.4"><vh>ex3 - jansen 多連桿機構</vh></v>
<v t="leo.20171003230621.1"><vh>ex4 -turtle 網際繪圖</vh></v>
<v t="leo.20171003222155.5"><vh>filereader</vh></v>
</v>
<v t="leo.20171012104230.1"><vh>@edit 20171012.md</vh></v>
<v t="len.20171030225800.1"><vh>@edit 20171016.md</vh></v>
<v t="len.20171023213432.1"><vh>@clean 20171023.md</vh></v>
<v t="len.20171030211633.1"><vh>@clean 20171030.md</vh></v>
<v t="leo.20171101211326.1"><vh>@clean 20171101.md</vh></v>
<v t="leo.20171113150704.1"><vh>@clean 20171113.md</vh></v>
<v t="yen.20170108171733.81" a="E"><vh>@path pages</vh>
<v t="yen.20170108171733.82"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="yen.20170108171733.83"><vh>產生 .key 與 .crt</vh></v>
</v>
<v t="yen.20170108171930.1"><vh>@button https server</vh></v>
<v t="yen.20170108171939.1"><vh>@button ipv6 https server</vh></v>
<v t="leo.20171016221327.2" a="E"><vh>Recovered Nodes</vh>
<v t="leo.20171016221327.3"><vh>Recovered node "ex2 - input 與單位換算" from @clean 20171003.md</vh>
<v t="leo.20171016221327.4"><vh>old:ex2 - input 與單位換算</vh></v>
<v t="leo.20171016221327.5"><vh>new:ex2 - input 與單位換算</vh></v>
</v>
<v t="leo.20171016221327.6"><vh>Recovered node "ex4 -turtle 網際繪圖" from @clean 20171003.md</vh>
<v t="leo.20171016221327.7"><vh>old:ex4 -turtle 網際繪圖</vh></v>
<v t="leo.20171016221327.8"><vh>new:ex4 -turtle 網際繪圖</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="len.20171023213432.1">@language md
Title: 2017 Fall CP 第七週考試
Date: 2017-10-23 11:00
Category: Course
Tags: 2017fall, CP, W7, exam
Slug: 40623224_2017-fall-cp-w7 - exam
Author: 40623224

W7 exam

&lt;!-- PELICAN_END_SUMMARY --&gt;

###操作影片:
&lt;iframe width="854" height="480" src="https://www.youtube.com/embed/ngqt4lFlNGs" frameborder="0" gesture="media" allowfullscreen&gt;&lt;/iframe&gt;

###學習心得:
這門課程使我學到以前電腦裡沒有學過的東西，雖然每次聽講一度想要放棄這門課，但是都會激勵自己、鼓勵自己一定要做下去。直到現在，漸漸的學會如何維護自己的網頁、如何拍影片、如何維護自己倉儲的WiKi以及如何從失敗中學習，也謝謝同學互相指點。雖然這次第一次拍影片有點小失誤但最終成功傳到近端，也讓我覺得從失敗中學習才是我收穫最大的。

###自評成績: 

每週出席情況:100%

紙本筆記:80%

隨身碟內容:100%

個人倉儲內容:85%

各週上課摘要:75%

自評分數:88分</t>
<t tx="len.20171030211633.1">@language md
Title: 2017 Fall CP 第八週考試
Date: 2017-10-30 11:00
Category: Course
Tags: 2017fall, CP, W8, exam
Slug: 40623224_2017-fall-cp-w8 - exam
Author: 40623224

W8 exam

&lt;!-- PELICAN_END_SUMMARY --&gt;

###操作影片:
&lt;iframe width="854" height="480" src="https://www.youtube.com/embed/DVL2yy9qzuQ" frameborder="0" gesture="media" allowfullscreen&gt;&lt;/iframe&gt;

###學習心得:
Eric6使我學到如何製作圖形的東西，像是計算機或者是CAD的線條製作。以前從來都沒有碰過這個程式，一開始接觸時也有些許害怕，但我漸漸的學會如何操作此程式，也從失敗中學習。這次是第二次拍影片，也學會如何使用ShareX及錄音，希望能再學習更多新知識。

###自評成績: 

每週出席情況:100%

紙本筆記:80%

隨身碟內容:100%

個人倉儲內容:85%

各週上課摘要:75%

自評分數:88分</t>
<t tx="leo.20170911090052.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911090052.2"># 投影片快捷鍵

* 利用箭頭上下前後換頁
* 按 f 鍵進入全螢幕模式 (full screen)
* 按 s 鍵可以顯示投影片筆記 (show)
* 按 o 鍵可以切換單張或全域檢視 (overview)
* 按 b 或 . 鍵可以切換螢幕黑屏 (black)
* 按 Esc 可以退出全螢幕或全域檢視 (Escape)

</t>
<t tx="leo.20170911093601.1">&lt;section&gt;
    @others
&lt;/section&gt;


						
</t>
<t tx="leo.20170911093601.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911093601.3"># 開啟隨身系統

* 點擊 c:\mde\python2017fall_36 目錄中的 start.bat 開啟
* 產生與 c:\mde\python2017fall_36\data 對應的 y:\ 
* 產生專屬的 Dos 指令區與 SciTE 編輯器
* 用瀏覽器, 以 pyqt5 example calculator 關鍵字找 calculator.py
* 將 calculator.py 內容放入 SciTE, 在 c:\tmp 存為 .py 後按 F5 
* 接著用 ansi c hello word 關鍵字找 .c 程式, 放入 SciTE, 存為 .c
* 存檔後, 按下 F5 執行
* SciTE 可以採解譯模式, 執行 Python3 與 ANSI C 程式

</t>
<t tx="leo.20170911093601.4">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911093601.5"># 了解 Fossil SCM

* 利用 Fossil SCM 關鍵字查詢, 十分鐘後, 請回答下列問題
* 何謂 SCM? 何謂 Fossil SCM?
* 如何使用 Fossil SCM?
* 用與不用 SCM, 有沒有差別?
* 機械設計工程師為何需要使用 Fossil SCM?


</t>
<t tx="leo.20170911095149.1">&lt;section&gt;
    @others
&lt;/section&gt;


						
</t>
<t tx="leo.20170911095149.2">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911095149.3"># 課程如何評分

* 出席: 20% (if 全勤: 提問與答題內容*平時表現)
* 平時表現: 30% (隨身碟與倉儲內容 + 每堂筆記內容)
* 驗收考試: 30% (三階段現場錄製操作與心得影片-註記時間與錄製人員學號)
* 驗收簡報: 20% (驗收週各組簡報, 各學員簡報, 根據驗收考試與簡報內容自評與互評)

</t>
<t tx="leo.20170911095149.4">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170911095149.5"># 依照學號與座位分組

* 分組不是找同學幫您做作業, 應付專題實習
* 分組是為了學習, 如何與豬隊友進行協同
* 全班依學號入座, 每六人一小組, 每三小組為一大組
* 每班提供兩台廣域伺服器, 配合與個人的隨身碟存放資料
* 每一個階段的練習, 都要拍成練習影片, 上傳 Youtube 與 Vimeo
* 影片標題必須冠上校名、系名、課程名與學號


</t>
<t tx="leo.20170912145121.1"></t>
<t tx="leo.20170912145133.1"></t>
<t tx="leo.20170912145144.1"></t>
<t tx="leo.20170912150642.1"></t>
<t tx="leo.20170912150710.1"></t>
<t tx="leo.20170912150710.2">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s publishconf.py")
g.es("admin pelican Github 執行完畢")


</t>
<t tx="leo.20170912210747.1"></t>
<t tx="leo.20170913103008.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170913103008.2"># SCM 功能

* SCM 是軟體組成元件與狀態的管理
* 關心要納入那些元件? 如何納入? 元件間如何組合運作?
* 關心目前的狀態如何? 功能是否滿足需求?
* 成員是否團隊合作? 是否創造出協同效益?
* 當狀態產生問題或缺陷, 如何追蹤? 如何改善?
* 成員是否依照規劃, 提供完整的文件、規格與手冊?


</t>
<t tx="leo.20170913103534.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170913103534.2"># SCM 目標 (1/2)

* 辨識 (identification) - 需求、流程與環境的辨識
* 控制 (control) - 批准或拒絕內容的變更
* 會計 (accounting) -  完整保存每個階段所進行的變更
* 審核 (auditing) - 確認建立完整的文件, 需求, 架構, 規範與使用者手冊
* 構建管理 (build) - 管理過程中所需的各類工具



</t>
<t tx="leo.20170913103707.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170913103707.2"># SCM 目標 (2/2)

* 流程管理 (process) - 確認過程融入組織的發展要求
* 環境管理 (environment) - 提供託管內容所需的軟體與硬體
* 團隊合作 (teamwork) - 促進團隊互動協同
* 缺陷追踪 (defect tracking) - 可追溯每個缺陷的源頭


</t>
<t tx="leo.20170913104957.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170913104957.2"># SCM 的目標

* 以團隊協同合作模式
* 透過詳細的履歷 (清楚註記時間、變更與建立者)
* 完整呈現並管理各階段內容的組成元件與狀態
* 達到資源高效運用, 最佳化軟體&lt;strike&gt;機械設計&lt;/strike&gt;開發過程

</t>
<t tx="leo.20171003222155.1">@language md
Title: 網際 Brython 3.3.4 程式執行環境 第四週
Date: 2017-10-03 11:00
Category: Course
Tags: 2017fall, cp, brython, w4
Slug: 40623224-brython-editor-334
Author: 40623224

Brython 程式環境可以用來練習許多 Python3 的簡單語法, 也可以納入 Javascript 程式庫, 利用 Ajax 模式結合網際瀏覽器與伺服器上的資源解決協同產品設計流程上的問題.

&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;!-- 導入 FileSaver 與 filereader --&gt;
&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.4 --&gt;
&lt;script type="text/javascript" src="./../data/Brython-3.3.4/brython_dist.js"&gt;
&lt;/script&gt;


&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

### 利用以下的編輯器執行 Python3 程式

在 Firefox 中, 以 Preferences - General - Downloads 選擇 "Always ask me where to save files"

在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading

&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;
&lt;script type="text/javascript"&gt;
function doSave(){
    var blob = new Blob([localStorage["py_src"]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById('filename').value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;!-- 請注意 Brython 3.3.0 之後的版本, 已經不能使用 script id 模式導入, 改用 pythonpath 中的 script1.py 供後續導入 --&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)
        

#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()
    
def clear_console(ev):
    doc["console"].value = ""

def clear_container(ev):
    doc["container"].clear()

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
doc['clear_container'].bind('click',clear_container)

&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;
&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave();"/&gt;
&lt;/form&gt;
&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;button id="clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;
&lt;!-- container 主要提供網際繪圖用之畫布 --&gt;
&lt;div id="container"&gt;&lt;/div&gt;
@others
</t>
<t tx="leo.20171003222155.2">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex1(ev):
    script1.editor.setValue('''#ex1 簡單的 for 迴圈範例
    for i in range(10):
        print(i)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex1'].bind('click',ex1)
&lt;/script&gt;&lt;a id="ex1"&gt;ex1&lt;/a&gt;-for 迴圈
</t>
<t tx="leo.20171003222155.3">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算

</t>
<t tx="leo.20171003222155.4">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex3(ev):
    script1.editor.setValue('''#jansen 多連桿機構驗算
from math import pi, cos, sin, sqrt, acos

radian = 180/pi
degree = pi/180

#PLAP
def plap(ax, ay, ac, bac, bx, by, ccw):
    if ccw == 1:
        cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    else:
        cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    return cx, cy

#PLLP
def pllp(ax, ay, ac, cb, bx, by, cw):
    if cw == 1:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    else:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    return cx, cy

ax = -38
ay = 0
# b 為原點
bx = 0
by = 0
cx = 0
cy = 7.8
# m 為配合 PLAP 新增固定點
mx = 30
my = 7.8
# dcm ccw 方向角度
dcm = 30*degree
cd = 15
# 三角形 dcm 為 ccw plap d=(a, cd, dcm, m)
dx, dy = plap(cx, cy, cd, dcm, mx, my, ccw=1)
print("dx=", dx, "dy=", dy)
# 三角形 aed 為 cw pllp e=(a, ae, ed, d)
ae = 41.5
ed = 50
ex, ey = pllp(ax, ay, ae, ed, dx, dy, cw=1)
print("ex=", ex, "ey=", ey)
# 三角形 afe 為 cw pllp f=(a, af, fe, e)
af = 40.1
fe = 55.8
fx, fy = pllp(ax, ay, af, fe, ex, ey, cw=1)
print("fx=", fx, "fy=", fy)
# 三角形 dha 為 cw pllp h=(d, dh, ha, a)
dh = 61.9
ha = 39.3
hx, hy = pllp(dx, dy, dh, ha, ax, ay, cw=1)
print("hx=", hx, "hy=", hy)
# 三角形 hgf 為 cw pllp g=(h, hg, gf, f)
hg = 36.7
gf = 39.4
gx, gy = pllp(hx, hy, hg, gf, fx, fy, cw=1)
print("gx=", gx, "gy=", gy)
# 三角形 hkg 為 cw pllp k=(h, hk, kg, g)
hk = 49
kg = 65.7
kx, ky = pllp(hx, hy, hk, kg, gx, gy, cw=1)
print("kx=", kx, "ky=", ky)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex3'].bind('click',ex3)
&lt;/script&gt;&lt;a id="ex3"&gt;ex3&lt;/a&gt;-多連桿機構
</t>
<t tx="leo.20171003222155.5">
&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_file(e):
    data = open("./../python_ex/for1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["get"].bind("click", get_file)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_temp1(e):
    data = open("./../python_ex/temp1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["get_temp1"].bind("click", get_temp1)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_ver_and_kw(e):
    data = open("./../python_ex/ver_and_kw.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["get_ver_and_kw"].bind("click", get_ver_and_kw)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def jansen(e):
    data = open("./../python_ex/jansen.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["jansen"].bind("click", jansen)
&lt;/script&gt;

&lt;!-- python3 tutorial1-tutorial7 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial(e):
    # 利用 e.target.text 取的對應按鈕的字串, 可以開啟對應的程式檔案
    data = open("./../python_ex/python3_"+e.target.text+".py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
    
document["tutorial1"].bind("click", tutorial)
document["tutorial2"].bind("click", tutorial)
document["tutorial3"].bind("click", tutorial)
document["tutorial4"].bind("click", tutorial)
document["tutorial5"].bind("click", tutorial)
document["tutorial6"].bind("click", tutorial)
document["tutorial7"].bind("click", tutorial)
&lt;/script&gt;

&lt;button id="get"&gt;for1.py&lt;/button&gt;&lt;button id="get_temp1"&gt;temp1.py&lt;/button&gt;&lt;button id="get_ver_and_kw"&gt;ver_and_kw.py&lt;/button&gt;&lt;button id="jansen"&gt;jansen.py&lt;/button&gt;

&lt;button id="tutorial1"&gt;tutorial1&lt;/button&gt;&lt;button id="tutorial2"&gt;tutorial2&lt;/button&gt;&lt;button id="tutorial3"&gt;tutorial3&lt;/button&gt;&lt;button id="tutorial4"&gt;tutorial4&lt;/button&gt;&lt;button id="tutorial5"&gt;tutorial5&lt;/button&gt;&lt;button id="tutorial6"&gt;tutorial6&lt;/button&gt;&lt;button id="tutorial7"&gt;tutorial7&lt;/button&gt;

Jansen 多連桿機構尺寸圖:

&lt;img src="./../data/jansen_sympy.png" width="800" /&gt;

</t>
<t tx="leo.20171003230621.1">

&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4 turtle 網際繪圖
import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖
</t>
<t tx="leo.20171016221327.2"></t>
<t tx="leo.20171016221327.3">(uncached) leo.20171003222155.3
Diff...
  
  &lt;script type="text/python3"&gt;
  from browser import document as doc
  import script1
  
  def ex2(ev):
      script1.editor.setValue('''#溫度轉換程式
  from browser import document as doc
  
  # 因為此函式與滑鼠互動, 需要 event 當作輸入
  def convTemp():
      mystring = ""
      cdegree = input("請輸入攝氏溫度:")
      fdegree = float(cdegree)*9/5 + 32
      output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
      # 利用 print() 將轉換結果送到 console 區
      print(output_string)
  
  #直接呼叫 convTemp() 執行
  convTemp()
      ''')
      script1.editor.scrollToRow(0)
      script1.editor.gotoLine(0)
  doc['ex2'].bind('click',ex2)
- &lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算
?                                  -
+ &lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算- 
</t>
<t tx="leo.20171016221327.4">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算</t>
<t tx="leo.20171016221327.5">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算

</t>
<t tx="leo.20171016221327.6">(uncached) leo.20171003230621.1
Diff...
- 
  
  &lt;script type="text/python3"&gt;
  from browser import document as doc
  import script1
  
  def ex4(ev):
      script1.editor.setValue('''#ex4 turtle 網際繪圖
  import turtle
  t=turtle.Turtle()
  
  t.penup()
  t.left(45)
  t.backward(125)
  t.right(45)
  t.pendown()
  
  for c in ['red', 'green', 'yellow', 'blue']:
      t.color(c)
      t.forward(75)
      t.left(90)
  
  t1=turtle.Turtle("turtle")
  t1.penup()
  
  t1.pendown()
  t1.width(3)
  for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
      t1.color(c)
      t1.forward(50)
      t1.left(60)
  
  t1.penup()
  t1.left(60)
  t1.backward(120)
  
  t1.pendown()
  t1.color('red')
  t1.write("I love Brython!!")
  
  turtle._Screen().end()
      ''')
      script1.editor.scrollToRow(0)
      script1.editor.gotoLine(0)
  doc['ex4'].bind('click',ex4)
  &lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖
</t>
<t tx="leo.20171016221327.7">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4 turtle 網際繪圖
import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖
</t>
<t tx="leo.20171016221327.8">

&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4 turtle 網際繪圖
import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖
</t>
<t tx="leo.20171101211326.1">@language md
Title: 2017 Fall CP 期中考心得
Date: 2017-11-01 11:00
Category: Course
Tags: 2017fall, CP, W9心得
Slug: 40623224_2017-fall-cp-w9心得
Author: 40623224

W9心得

&lt;!-- PELICAN_END_SUMMARY --&gt;

###心得影片:
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/zC5X5aYHd9k" frameborder="0" gesture="media" allowfullscreen&gt;&lt;/iframe&gt;</t>
<t tx="leo.20171109005120.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109005120.2"># W2

* 在區網中建立多 Fossil SCM 倉儲伺服環境, 以 cpb2017 帳號目錄放置所有 .fossil
* 確認可以透過兩個 fossil 指令, 在區網中建立倉儲, 設定管理者帳號與密碼
* 建立倉儲檔案同時, 根據各班學員名單, 寄出通知信, 其中包含連結與帳號密碼
* 用來寄信的帳號必須符合 Gmail 的寄信安全設定, 每天至多每帳號只能寄 100 封信
* 將學員 .fossil 檔案 sftp 到伺服主機對應目錄
</t>
<t tx="leo.20171109005308.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109005308.2"># W1

* 機械設計是一種表達，六種表達如何培養創造力

* 六種表達:口語 Speaking、文字Text、2D、3D、數學mathematics、實作 Implementation

* 創造力:自學力、執行力、想像力

* 程式:流程與格式

無心向學，被當是好事乁( ◔ ౪◔)「 ╮(╯∀╰)╭ ╮(╯_╰)╭
</t>
<t tx="leo.20171109005315.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109005315.2"># W3

* 學習fossil指令

* 如何從 https://cadpb.kmol.info/4052 clone 網誌與投影片架構檔案, 然後提交推送到自己的倉儲

</t>
<t tx="leo.20171109005322.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109005322.2"># W4

* 當版本資料變更時, 可以利用 fossil status 查看內容, 必要時利用 fossil delete 配合維護近端版本的一致性

* 利用 .fossil-settings 目錄下的 ignore-glob 檔案, 避開從近端推送到遠端的特定檔案.

</t>
<t tx="leo.20171109005328.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109005328.2">W5放假

# W6

* 使用 Eric6 IDE 建立 PyQt5 視窗程式, 計算器程式的圖形介面將從 Qt Designer 中, 以滑鼠及視覺化模式建立, 之後再轉為 .py 程式後, 與隨後的程式邏輯進行互動

* 從最原始的 fossil init 在伺服器建立倉儲開始, 說明如何建立網誌與投影片架構

* 使用 Fossil SCM 倉儲時, 如何在操作系統與 Pelican 轉檔過程正確改版

* git clone Github 上的倉儲

</t>
<t tx="leo.20171109005333.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109005333.2"># W7~W8

* 以 ShareX 拍攝與課程相關的操作影片及練習與 PyQt5 計算機程式有關的語法與操作步驟.

* 完成操作影片拍攝後, 必須改版上述第七週學習心得網誌中, 然後寫上其他操作心得後, 根據課程的評分規劃, 列出各項具體證據後, 在網誌中寫上自評期中成績.

</t>
<t tx="leo.20171109005339.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109005339.2"># 課後心得

這門課程使我學到以前電腦裡沒有學過的東西，雖然每次聽講一度想要放棄這門課，但是都會激勵自己、鼓勵自己一定要做下去。直到現在，漸漸的學會如何維護自己的網頁、如何拍影片、如何維護自己倉儲的WiKi、學會eric6以及如何從失敗中學習，也謝謝同學互相指點。我覺得從失敗中學習才是我收穫最大的。

</t>
<t tx="leo.20171109005345.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109005345.2"># 自評成績

# 78

</t>
<t tx="leo.20171109010939.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20171109010939.2"># 課本筆記

&lt;img class="beord" src="./image/154321.jpg" &lt;/img&gt;
&lt;img class="beord" src="./image/154322.jpg" &lt;/img&gt;
&lt;img class="beord" src="./image/154323.jpg" &lt;/img&gt;
</t>
<t tx="leo.20171113150704.1">@language md
Title: 2017 Fall CP 第十週
Date: 2017-11-13 11:00
Category: Course
Tags: 2017fall, CP, W10
Slug: 40623224_2017-fall-cp-w10
Author: 40623224

W10

&lt;!-- PELICAN_END_SUMMARY --&gt;

使用eric6產生計算機表單

下載dia portable

下載gimp portable

###客製化可攜環境

使用者可以配合需求修改 start.bat, stop.bat 以及 launchLeo.py, 讓系統啟動時, 自行建立進入特定目錄的命令列視窗, 並且自動開啟特定 Leo Editor 專案.

例如:

start.bat 改為:

@echo off

REM 設定 y 硬碟代號與 data 目錄對應

set Disk=y

subst %Disk%: "data"

REM 設定 leo 相關對應 Home 位置

set HomePath=%Disk%:\home

set HomeDrive=%Disk%:\home

set Home=%Disk%:\home

REM 將系統 Python 程式的 io 設為 utf-8

set PYTHONIOENCODING="utf-8"

REM 將後續的指令執行, 以 %Disk% 為主

%Disk%:

REM 設定 PYTHONPATH

set PYTHONPATH=%Disk%:\python36

REM 設定 Leo 所用的編輯器

set LEO_EDITOR=%Disk%:\wscite\SciTE.exe

REM for fossil https 連線設定

REM 若在近端使用 fossil ui 則要蓋掉

REM set HTTPS=on

REM 指令搜尋路徑設定

set path1=%Disk%:;%Disk%:\python36;%Disk%:\git\bin;%Disk%:\python36\Scripts;%Disk%:\Git\bin;
path=%path1%;

start /MIN %Disk%:\wscite\SciTE.exe

start /MIN %Disk%:\wscite\SciTE.exe

start /MIN cmd.exe

start /MIN cmd.exe

REM 啟動 cmd 之前先更換目錄到倉儲目錄

cd %Disk%:\tmp\fossil\wd\2017fall

start /MIN cmd.exe

REM 啟動 Leo 編輯器

%Disk%:\Python36\python.exe %Disk%:\launchLeo.py

REM 啟動 stunnel

REM start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo

REM start /MIN stunnel.exe

launchLeo.py 改為:

#!/usr/bin/env python

""" Leo launcher script
A minimal script to launch leo.
"""

import leo.core.runLeo
leo.core.runLeo.run(fileName="y:/tmp/fossil/wd/2017fall/users/yen.leo")
</t>
<t tx="yen.20170108171605.1"></t>
<t tx="yen.20170108171605.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="yen.20170108171605.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="yen.20170108171622.1">2017 Fall 機械設計工程系 CADP &amp; CP

倉儲位置: https://mde1a1.kmol.info/2017fall

每一協同成員都應該要在 users 目錄下有一個 Leo 檔案

</t>
<t tx="yen.20170108171733.1"></t>
<t tx="yen.20170108171733.10">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
&lt;title&gt;
2017 Spring 機械設計工程系網際內容管理
&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="data/reveal/reveal.css"&gt;
    &lt;link rel="stylesheet" href="data/reveal/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax highlighting of code --&gt;
    &lt;link rel="stylesheet" href="data/reveal/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'data/reveal/pdf.css' : 'data/reveal/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="data/reveal/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="yen.20170108171733.11">&lt;body&gt;
@others
&lt;script src="data/reveal/head.min.js"&gt;&lt;/script&gt;
&lt;script src="data/reveal/reveal.js"&gt;&lt;/script&gt;
&lt;script&gt;
        // More info https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
            controls: true,
            progress: true,
            history: true,
            center: true,

            transition: 'slide', // none/fade/slide/convex/concave/zoom

            // More info https://github.com/hakimel/reveal.js#dependencies
            dependencies: [
                { src: 'data/reveal/classList.js', condition: function() { return !document.body.classList; } },
                { src: 'data/reveal/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'data/reveal/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'data/reveal/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                { src: 'data/reveal/zoom.js', async: true },
                { src: 'data/reveal/notes.js', async: true },
                { src: 'data/reveal/math.js', async: true }
            ]
        });
&lt;/script&gt;
&lt;/body&gt;
</t>
<t tx="yen.20170108171733.12">&lt;div class="reveal"&gt;
@others
&lt;/div&gt;

</t>
<t tx="yen.20170108171733.13">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;
&lt;div class="slides"&gt;
@others
&lt;/div&gt;

</t>
<t tx="yen.20170108171733.14">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20170108171733.15">## 期中考心得報告

### 機械設計一乙

24號 鐘偉哲

&lt;small&gt;
Created by [KMOLab](http://kmolab.github.io/blog/)
&lt;/small&gt;

[40623224網誌](blog/index.html)

準備好自己的筆記本、隨身碟、耳機

</t>
<t tx="yen.20170108171733.2">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="yen.20170108171733.5"></t>
<t tx="yen.20170108171733.64">&lt;section&gt;
@others
&lt;/section&gt;</t>
<t tx="yen.20170108171733.65">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="yen.20170108171733.66"># 數學符號與方程式

Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:

$$I = \int \rho R^{2} dV$$
</t>
<t tx="yen.20170108171733.67">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="yen.20170108171733.68">## 利用 Markdown 寫投影片
以下利用 Markdown 格式展示 Python 程式碼:
```
@language python
# use threading and subprocess to threading the make process
import os
import subprocess
import threading

def domake():
    
    path = "../exposed/api/exposed"
    ubuntu = "../Ubuntu"
    
    # create obj path
    
    if not os.path.exists(path+"/../obj"):
        os.makedirs(path+"/../obj")
    
    subprocess.call(["make", "clean"], cwd=path)
    subprocess.call("make", cwd=path)
    subprocess.call(["cp", "{libslvs.so, _slvs.so, slvs.py}", ubuntu], cwd=path)
    subprocess.call(["python3", "circle_ex.py"], cwd=path+"/"+ubuntu)
    
make = threading.Thread(target=domake)
make.start()
```
</t>
<t tx="yen.20170108171733.69">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="yen.20170108171733.70">## 使用 iframe 導入影片

### 導入影片 template

&lt;iframe src="https://player.vimeo.com/video/183950627" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</t>
<t tx="yen.20170108171733.71"></t>
<t tx="yen.20170108171733.8">@language xml
@tabwidth -4
@others

</t>
<t tx="yen.20170108171733.81"></t>
<t tx="yen.20170108171733.83">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
<t tx="yen.20170108171733.9">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
@others
&lt;/html&gt;
</t>
<t tx="yen.20170108171930.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print(os.getcwd())
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170108171939.1">@language python
import os
import subprocess
import threading
import socket
import http.server, ssl

class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
  
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '2001:288:6004:17:3004::808'
    server_address = (ipv6_address, 6443)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("6443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170224232341.1"></t>
<t tx="yen.20170224232341.2"></t>
</tnodes>
</leo_file>
